// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/1/RAM8.hdl

/**
 * Memory of 8 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM8[address(t)](t)
 *     Write: If load(t-1) then RAM8[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM8 {

    IN  in[16], load, address[3];
    OUT out[16];

    PARTS:
    
    // first, demux the load bit out to each of the registers
    // the idea is that if load=0, then every register sees load=0
    // but if load=1, only the address register sees load=1
    DMux8Way(in=load, sel=address,
             a=load0,
             b=load1,
             c=load2,
             d=load3,
             e=load4,
             f=load5,
             g=load6,
             h=load7);

    Register(in=in, load=load0, out=out0);
    Register(in=in, load=load1, out=out1);
    Register(in=in, load=load2, out=out2);
    Register(in=in, load=load3, out=out3);
    Register(in=in, load=load4, out=out4);
    Register(in=in, load=load5, out=out5);
    Register(in=in, load=load6, out=out6);
    Register(in=in, load=load7, out=out7);

    // Now we just need to mux the register outputs according to address
    Mux8Way16(a=out0,
              b=out1,
              c=out2,
              d=out3,
              e=out4,
              f=out5,
              g=out6,
              h=out7,
              sel=address, out=out);
}
